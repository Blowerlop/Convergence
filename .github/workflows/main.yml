name: GameCI Template 🎮

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  ##testRunner:
  #  name: Test in ${{ matrix.testMode }} ✨
  #  runs-on: ubuntu-latest
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      testMode:
  #        - EditMode
  #        - PlayMode
  #      projectPath:
  #        - ./Unity/
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4
#
  #    - name: Create LFS file list
  #      run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
#
  #    - name: Restore LFS cache
  #      uses: actions/cache@v3
  #      id: lfs-cache
  #      with:
  #        path: .git/lfs
  #        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
#
  #    - name: Git LFS Pull
  #      run: |
  #        git lfs pull
  #        git add .
  #        git reset --hard
#
  #    - name: Restore Library cache
  #      uses: actions/cache@v3
  #      with:
  #        path: Library
  #        key: Library-test-project-${{ matrix.targetPlatform }}
  #        restore-keys: |
  #          Library-test-project-
  #          Library-
#
  #    - name: Run tests
  #      uses: game-ci/unity-test-runner@v3
  #      id: testRunner
  #      with:
  #        testMode: ${{ matrix.testMode }}
  #        checkName: ${{ matrix.testMode }} test results
  #        githubToken: ${{ secrets.GITHUB_TOKEN }}
  #        customParameters: -nographics
  #        projectPath: ${{ matrix.projectPath }}
#
  #    - uses: actions/upload-artifact@v3
  #      #if: ${{ github.event_name == 'push' }}
  #      with:
  #        name: Test results (${{ matrix.testMode }})
  #        path: ${{ steps.testRunner.outputs.artifactsPath }}
#
#
#
  ##buildWindows:
  #  needs: testRunner
  #  name: Build for Windows 🖥️
  #  runs-on: ubuntu-latest
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      projectPath:
  #        - ./Unity/
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4
#
  #    - name: Create LFS file list
  #      run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
#
  #    - name: Restore LFS cache
  #      uses: actions/cache@v3
  #      id: lfs-cache
  #      with:
  #        path: .git/lfs
  #        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
#
  #    - name: Git LFS Pull
  #      run: |
  #        git lfs pull
  #        git add .
  #        git reset --hard
#
  #    - name: Restore Library cache
  #      uses: actions/cache@v3
  #      with:
  #        path: ./Unity/Library
  #        key: ./Unity/Library-build-StandaloneWindows64
  #        restore-keys: |
  #          ./Unity/Library-build-
  #          ./Unity/Library-
#
  #    - uses: game-ci/unity-builder@v3
  #      with:
  #        targetPlatform: StandaloneWindows64
  #        projectPath: ${{ matrix.projectPath }}
#
  #    - uses: actions/upload-artifact@v3
  #      #if: ${{ github.event_name == 'push' }}
  #      with:
  #        name: build-StandaloneWindows64
  #        path: build/StandaloneWindows64
          #projectPath: ${{ matrix.projectPath }}

  compareVersions:
    #needs: buildWindows
    name: Compare Versions
    runs-on: ubuntu-latest
    outputs:
      versionFile: ${{ steps.VersionFile.outputs.prop }}
      releaseTag: ${{steps.ReleaseTag.outputs.tag}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Json Reader
        id: VersionFile
        uses: notiz-dev/github-action-json-property@release
        with:
          path: './Unity/Version.json'
          prop_path: 'version'

      - name: Echo package.json
        run: echo "${{ steps.VersionFile.outputs.prop }}"
      - name: Read Latest release tag

        id: ReleaseTag
        uses: oprypin/find-latest-tag@v1
        with:
          repository: Blowerlop/TBD
          releases-only: true 

      - name: Echo latest tag
        run: echo "${{ steps.ReleaseTag.outputs.tag }}"
          
  releaseProject:
    needs: compareVersions
    name: Release Project
    runs-on: ubuntu-latest
    if: ${{github.event_name == 'push'}} 
    if: ${{needs.compareVersions.outputs.versionFile.outputs.prop != needs.compareVersions.outputs.ReleaseTag.outputs.tag }} 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Json Reader
        id: VersionFile
        uses: notiz-dev/github-action-json-property@release
        with:
          path: './Unity/Version.json'
          prop_path: 'version'

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-StandaloneWindows64

      - name: Archive site content
        uses: thedoctor0/zip-release@master
        with:
          filename: TBD.zip

      - name: Create GitHub release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{ steps.VersionFile.outputs.prop }}
          release_name: ${{ steps.VersionFile.outputs.prop }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url}}
          asset_path: ./TBD.zip
          asset_name: TBD.zip
          asset_content_type: application/zip


          




#  buildWebGL:
#    needs: testRunner
#    name: Build for WebGL 🖥️
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Create LFS file list
#        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
#
#      - name: Restore LFS cache
#        uses: actions/cache@v2
#        id: lfs-cache
#        with:
#          path: .git/lfs
#          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
#
#      - name: Git LFS Pull
#        run: |
#          git lfs pull
#          git add .
#          git reset --hard
#
#      - name: Restore Library cache
#        uses: actions/cache@v2
#        with:
#          path: Library
#          key: Library-build-WebGL
#          restore-keys: |
#            Library-build-
#            Library-
#
#      - uses: game-ci/unity-builder@v2
#        with:
#          targetPlatform: WebGL
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: build-WebGL
#          path: build/WebGL



#  buildAndroid:
#    needs: testRunner
#    name: Build for Android 📱
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Create LFS file list
#        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
#
#      - name: Restore LFS cache
#        uses: actions/cache@v2
#        id: lfs-cache
#        with:
#          path: .git/lfs
#          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
#
#      - name: Git LFS Pull
#        run: |
#          git lfs pull
#          git add .
#          git reset --hard
#
#      - name: Restore Library cache
#        uses: actions/cache@v2
#        with:
#          path: Library
#          key: Library-build-Android
#          restore-keys: |
#            Library-build-
#            Library-
#
#      - uses: game-ci/unity-builder@v2
#        with:
#          targetPlatform: Android
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: build-Android
#          path: build/Android
#
#
#  deployPages:
#    needs: buildWebGL
#    name: Deploy to Github Pages 🚀
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - uses: actions/download-artifact@v2
#        with:
#          name: build-WebGL
#          path: build
#
#      - name: Deploy 🚀
#        uses: JamesIves/github-pages-deploy-action@4.1.4
#        with:
#          branch: gh-pages
#          folder: build/WebGL